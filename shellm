#!/usr/bin/env bash
#shopt -s nullglob globstar
#set -o pipefail
#set -x
# Default Variables
API_URL="${API_URL:-http://localhost:11434/api}"  # Read API_URL from environment or use default
MODEL_SMALL="${MODEL_SMALL:-qwen2.5:3b-instruct-q5_K_M}"  # Read API_URL from environment or use default
NUM_PREDICT=500  # Default number of predictions
VERBOSE=2  # Default Errors, Warnings and Tools
USE_TOOL=0
SCRIPT_PATH=$(dirname "$(realpath -s "$0")")

# Global associative array for tools and prompts
declare -A PROMPTS=()
declare -A TOOLS=()

# Output variables
SHELLM_OUTPUT=""
SHELLM_PREVIOUS=""
SHELLM_ERROR=""

# Named pipes for inter-process communication
CHAT_PIPE="/tmp/SHELLM_CHAT"
THINK_PIPE="/tmp/SHELLM_THINK"

# Create named pipes if they don't exist
[[ -p $CHAT_PIPE ]] || mkfifo $CHAT_PIPE
# TODO: Read from input so that thought processed can be chained by piping
[[ -p $THINK_PIPE ]] || mkfifo $THINK_PIPE

# Remove named pipes on script exit
trap "rm -f $CHAT_PIPE $THINK_PIPE" EXIT

# Function for colored logging with severity levels
log() {
  local level="$1"; local message="\e[37m$(echo "$2" | tr '\n' ' ' )\e[0m"; local color
  case "$level" in
    debug) color="\e[33m[DEBUG]\e[0m" ;;
    tool) color="\e[36m[TOOL]\e[0m" ;;
    warning) color="\e[35m[WARNING]\e[0m" ;;
    error) color="\e[31m[ERROR]\e[0m" ;;
    *) color="\e[0m" ;;
  esac
  [[ $VERBOSE -gt 0 && "$level" == "error" ]] && echo -e "\n$color $message" >&2
  [[ $VERBOSE -gt 1 && "$level" == "warning" ]] && echo -e "\n$color $message" >&2
  [[ $VERBOSE -gt 2 && "$level" == "tool" ]] && echo -e "\n$color $message" >&2
  [[ $VERBOSE -gt 3 && "$level" == "debug" ]] && echo -e "\n$color $message" >&2
}

# Function to escape input read from stdin
escape() {
  # Read from stdin
  local input
  input=$(cat)

  # Escape special characters only for command execution, not for user output
  local escaped_input
  escaped_input="${input//&/\\&}"  # Escape ampersands
  escaped_input="${escaped_input//\\/\\\\}"  # Escape backslashes
  escaped_input="${escaped_input//\/\x27}"  # Escape single quotes
  escaped_input="${escaped_input//\"/\\\"}"  # Escape double quotes
  escaped_input="${escaped_input//\`/\\\`}"  # Escape backticks
  echo "$escaped_input"
}

# Function to load tools from YAML file
load_config() {
  local config_paths=("$XDG_CONFIG_HOME/shellm/config.yaml" "$HOME/.config/shellm/config.yaml" "$HOME/config.yaml" "$(pwd)/config.yaml")
  local merged_config_json="{}"
  for path in "${config_paths[@]}"; do
    [[ -f $path ]] && merged_config_json=$(yq -s '.[0] * .[1]' <(echo "$merged_config_json") "$path") && log debug "Loaded config from $path"
  done

  # Extract tools sub-field from the config
 local tools_json=$(echo "$merged_config_json" | jq -c '.tools | to_entries[]')
  readarray -t tool_entries <<< "$tools_json"
  for tool in "${tool_entries[@]}"; do
    TOOLS["$(echo "$tool" | jq -r '.key')"]="$(echo "$tool" | jq -r '.value')"
  done
  # Extract prompts and populate the PROMPTS array
  local prompts_json=$(echo "$merged_config_json" | jq '.prompts')
  readarray -t prompt_entries < <(echo "$prompts_json" | jq -c 'to_entries[]')
  for prompt in "${prompt_entries[@]}"; do
    PROMPTS["$(echo "$prompt" | jq -r '.key')"]="$(echo "$prompt" | jq -r '.value')"
  done

}

# Initialize the tools by loading them from the JSON file
load_config

# Function to display usage
usage() {
  echo "Usage: $0 [-u api_url] [-m MODEL_SMALL] [-n num_predict] [-v] [-t] [prompt]"
  echo "  -u    API URL (default: $API_URL)"
  echo "  -m    Model name (default: $MODEL_SMALL)"
  echo "  -n    Number of predictions (default: $NUM_PREDICT)"
  echo "  -v    Verbose mode (show debug output)"
  echo "  -t    Activate tool use (uses generate_and_apply_tool_calls instead of generate_response)"
  echo "  prompt  Optional prompt (will be prepended if reading from stdin)"
  exit 1
}

# Function to generate a response from the model
generate_response() {
  log debug "generate_response"

  local num_predict="$NUM_PREDICT"  # Fallback to global default if not set by -n
  local json_format=0  # Flag for JSON format
  local prompt="$1"

  # Escape the prompt and system prompt for JSON
  local system_prompt
  system_prompt="${PROMPTS["instruct"]}"
  if [ $json_format -eq 1 ]; then
    system_prompt+="\n
        You MUST return a JSON object with the following structure:
        { \"result\": <VALUE> }

        Examples:
        Input: Is the sky blue?
        Output: { \"result\": true }

        Input: Write a number between 1 and 50
        Output: { \"result\": 36 }

        Input: Name an animal
        Output: { \"result\": \"cow\" }
    "
  fi
  escaped_system_prompt=$(echo "$system_prompt" | jq -Rsa .)
  log debug "System prompt: $escaped_system_prompt"

  options=$(jq -n \
    --argjson num_predict "$num_predict" \
    --argjson num_ctx 4096 \
    --argjson json_format "$json_format" \
    '{
      num_predict: $num_predict,
      num_ctx: $num_ctx
    } + if $json_format == 1 then {format: "json"} else {} end'
  )
  local escaped_prompt
  escaped_prompt=$(echo "$prompt" | jq -Rsa .)
  log debug "User prompt: $escaped_prompt"

  # Capture the output of the streaming request into SHELLM_OUTPUT
  curl -sN "$API_URL/generate" \
    -d "{\"model\": \"$MODEL_SMALL\", \"system\": $escaped_system_prompt, \"prompt\": $escaped_prompt, \"stream\": true, \"options\": $options }" | \
    stdbuf -o0 jq -j '.response // empty'
  echo ""
}

generate_tool_calls() {
  local prompt="$1"

  log tool "Generating toolchain based on prompt: $prompt"

  local escaped_prompt
  escaped_prompt=$(echo "${PROMPTS["tool"]}\n# Current Task\n$prompt" | jq -Rsa .)

  # Construct the system message
  local system_message
  system_message=$(jq -n --arg content "$SYSTEM_PROMPT_TOOL" '{role: "system", content: $content}')

  # Construct the tools JSON using jq
  local tools_json
  tools_json=$(printf "%s" "${TOOLS[@]}" | jq -s .)
  # Construct the API payload
  local payload
  payload=$(jq -n --arg model "$MODEL_SMALL" --argjson messages "[${system_message}, {\"role\": \"user\", \"content\": $escaped_prompt}]" --argjson tools "$tools_json" \
        '{model: $model, messages: $messages, stream: false, tools: $tools}')

  # Make the API call and capture the response
  local response
  response=$(curl -s "$API_URL/chat" -d "$payload")
  log debug "Response: ${response}"

  local tool_calls
  tool_calls=$(echo "$response" | jq -c '.message.tool_calls // []')
  # Convert tool_calls to a newline-separated list for proper handling
  echo "$tool_calls" | jq -c '.[]'
}

# Apply a list of tool call definitions
# Assuming you have a list of tool calls in JSON format, you can pass them directly to apply_tool_calls.
# For example:
#
# tool_calls=(
#   '{"function":{"name":"get_current_day"}}'
#   '{"function":{"name":"generate","arguments":{"prompt":"Please write a poem about $SHELLM_PREVIOUS."}}}'
#   '{"function":{"name":"say","arguments":{"message":"$SHELLM_PREVIOUS"}}}'
# )
#
# apply_tool_calls "${tool_calls[@]}"
#
apply_tool_calls() {
  local tool_calls_array=("$@")
  log debug "Tool calls: ${tool_calls_array[*]}"
  for tool_call in "${tool_calls_array[@]}"; do
    log debug "Processing tool_call $tool_call"
    local tool_name
    tool_name=$(echo "$tool_call" | jq -r '.function.name')

    # Fetch the corresponding tool definition
    local tool_def="${TOOLS[$tool_name]}"
    log tool "Calling '$tool_name'"
    if [ -z "$tool_def" ]; then
      log error "Error: Tool '$tool_name' not found in TOOLS array."
      exit 1
    fi

    # Fetch the 'exec' command template
    local exec_cmd_template
    exec_cmd_template=$(echo "$tool_def" | jq -rc '.function.exec')

    # Interpolate parameters from tool_call into the exec command
    local interpolated_cmd="$exec_cmd_template"
    local parameters
    parameters=$(echo "$tool_call" | jq -c '.function.arguments // {}')

    # Iterate over each parameter and replace placeholders in the command
    for param in $(echo "$parameters" | jq -r 'keys[]'); do
      local value
      value=$(echo "$parameters" | jq -r --arg param "$param" '.[$param]')

      # Check if escaping is required
      local raw
      raw=$(echo "$tool_def" | jq -r --arg param "$param" '.function.parameters.properties[$param].raw // false')
      log debug "Parameter: $param, Value: $value, Raw: $raw"
      value="${value//&/\\&}"  # Escape ampersands
      # Conditionally escape or pass as-is based on the "escape" field
      if [[ ! "$raw" == "true" ]]; then
        log debug "Escaping parameter: $param"
        value="$(echo "$value" | escape)"

      fi
      # Replace {{parameter}} syntax with actual values
      interpolated_cmd="${interpolated_cmd//\{\{$param\}\}/$value}"
    done

    # Interpolate SHELLM_PREVIOUS and SHELLM_OUTPUT
    interpolated_cmd="${interpolated_cmd//\{\{SHELLM_PREVIOUS\}\}/$SHELLM_PREVIOUS}"
    interpolated_cmd="${interpolated_cmd//\{\{SHELLM_OUTPUT\}\}/$SHELLM_OUTPUT}"


    log tool "Executing command: $interpolated_cmd"
    #generate_response "You are the inner monologue of the AI. You keep concise records of past and future actions to improve your world model. This future action must be summarized into human language and condensed into a single bullet point, starting with \"I will\": ('$interpolated_cmd')"
    # Execute the interpolated command, capturing all details
    exit_code=0

    # Use a subshell to redirect stdout and stderr
    {
      SHELLM_PREVIOUS=$(eval "$interpolated_cmd")
      exit_code=$?
    } 2> >(SHELLM_ERROR=$(cat) >&2)

    log tool "Exit: $exit_code"

    # Check for a nonzero exit code and echo errors if present
    if [[ $exit_code -ne 0 ]]; then
      log error "Command '$interpolated_cmd' failed with exit code $exit_code."
      log error "$SHELLM_ERROR"
      # TODO Consider recursion with a fresh prompt to allow the agent to try again
      exit 1
    else
      log tool "Result: $SHELLM_PREVIOUS"
    fi
    echo "$SHELLM_PREVIOUS" > /dev/tty
    SHELLM_OUTPUT+=$SHELLM_PREVIOUS
  done
}

# Generate a toolchain based on a prompt. Then immediately apply it
generate_and_apply_tool_calls() {
  mapfile -t tool_calls_array < <(generate_tool_calls "$1")
  apply_tool_calls "${tool_calls_array[@]}"
}
# Parse command line options
while getopts ":u:m:n:v:th" opt; do
  case $opt in
    u) API_URL="$OPTARG" ;;
    m) MODEL_SMALL="$OPTARG" ;;
    n) NUM_PREDICT="$OPTARG" ;;
    v) VERBOSE="$OPTARG" ;;  # Set verbose mode
    t) USE_TOOL=1 ;;  # Set tool use flag
    h) usage ;;
    \?) log error "Invalid option: -$OPTARG"; usage ;;
    :) log error "Option -$OPTARG requires an argument."; usage ;;
  esac
done

# Determine execution path based on arguments
shift $((OPTIND - 1))
if [[ $# -eq 2 ]]; then
  FUNC="$1"; shift
  type "$FUNC" &>/dev/null && "$FUNC" "$@" || { log error "Function '$FUNC' not found"; exit 1; }
fi

# Handle the prompt as a positional argument
PROMPT="$*"

# If input is provided via stdin, prepend the optional prompt
if [ ! -t 0 ]; then
  STDIN_INPUT=$(cat)
  PROMPT="${PROMPT}${PROMPT:+ }${STDIN_INPUT}"
fi

# Default prompt if none was provided
PROMPT="${PROMPT:-Why is the sky blue? Write a short markdown document}"

log debug "Calling $API_URL with $MODEL_SMALL requesting $NUM_PREDICT tokens"
log debug "Final prompt: $PROMPT"

# Function to check if the model exists
check_model_exists() {
  local model_check
  log debug "Checking if model $MODEL_SMALL exists on API server..."
  model_check=$(curl -s -o /dev/null -w "%{http_code}" "$API_URL/show" -d "{\"model\": \"$MODEL_SMALL\"}")

  if [[ "$model_check" == "200" ]]; then
    log debug "Model $MODEL_SMALL exists."
    return 0
  else
    log warning "Model $MODEL_SMALL does not exist. Attempting to pull..."
    return 1
  fi
}

# Function to pull the model
pull_model() {
  local pull_response
  log debug "Attempting to pull model $MODEL_SMALL..."
  pull_response=$(curl -s -o /dev/null -w "%{http_code}" "$API_URL/pull" -d "{\"model\": \"$MODEL_SMALL\", \"stream\": false}")

  if [[ "$pull_response" == "200" ]]; then
    log debug "Successfully pulled model $MODEL_SMALL."
  else
    log error "Error pulling model $MODEL_SMALL. HTTP Status: $pull_response"
    exit 1
  fi
}

# Function to gather system information
gather_system_info() {
  local terminal_info
  local os_info

  # Gather terminal, hostname, and OS type information
  terminal_info=$(echo "$TERM")
  os_info=$(cat /etc/os-release)  # Get the OS type

  # Create a formatted output
  echo "Terminal: $terminal_info\nOS Type: $os_info"
}

#tool_calls=(
#   '{"function":{"name":"while","arguments":{"predicate":"The joke was considered funny","tools":[{"function":{"name":"say","arguments":{"message":"Hi"}}},{"function":{"name":"ask","arguments":{"question":"Was the joke funny?"}}}]}}}'
# )
#apply_tool_calls "${tool_calls[@]}"
#exit

# Check if the model exists, if not, pull it
if ! check_model_exists; then
  pull_model
fi

# Call the appropriate function based on tool usage
if [ "$USE_TOOL" -eq 1 ]; then
  escaped_description_prompt=$(
    jq \
    --arg prompt "$PROMPT" \
    -n '"Create a sharp and concise title of the following assignment: \($prompt) "'
  )
  escaped_system_prompt=$(
    jq -n \
      --arg prompt "${PROMPTS["tool_context"]}" \
      --arg sysinfo "$(gather_system_info)" \
      --arg user_prompt "$PROMPT" \
      '"#Assignment\n\($prompt)\n\n# System Info:\n\($sysinfo)\n\n# User request:\n\($user_prompt)"'
  )
  tool_calls=(
     "$(jq -n --argjson prompt "$escaped_description_prompt" \
               '{"function":{"name":"generate","arguments":{"prompt":$prompt}}}')"
     "$(jq -n --argjson prompt "$escaped_system_prompt" \
               '{"function":{"name":"generate","arguments":{"prompt":$prompt}}}')"
     "$(jq -n --argjson empty "$escaped_system_prompt" \
               '{"function":{"name":"say","arguments":{"message":"\n# Workflow results\n\n"}}}')"
  )

  apply_tool_calls "${tool_calls[@]}"

  toolchain_prompt=$(
    jq -n \
    --arg prompt "$PROMPT"  \
    --arg previous "$SHELLM_PREVIOUS" \
    '"The request of the user is \($prompt)\n# Execution plan\n\($previous)"'
  )
  generate_and_apply_tool_calls "$toolchain_prompt"

  # Construct tool call JSON with jq
  tool_calls=(
   "$(jq -n --argjson empty "$escaped_system_prompt" \
             '{"function":{"name":"say","arguments":{"message":"\n# Review\n\n"}}}')"
    "$(jq -n \
    --arg output "$SHELLM_OUTPUT" \
    '{"function": {"name": "generate", "arguments": {"prompt": "# Task\n\nProvide a brief summary of the following content\n\n#Content\n\n\($output)\n\n## Summary:\n\n"}}}')"
  )

  apply_tool_calls "${tool_calls[@]}"
  exit
else
  generate_response "$PROMPT" "$NUM_PREDICT"
fi
