execute_shell_command:
  type: function
  function:
    name: execute_shell_command
    description: Constructs a shell command with arguments to carry out the request.
    parameters:
      type: object
      properties:
        command:
          type: string
          description: The shell command to execute. Bash syntax is allowed
          raw: true
      required:
        - command
    exec: '${command}'
fork:
  type: function
  function:
    name: fork
    description: Display a static message to the user.
    parameters:
      type: object
      properties:
        message:
          type: string
          description: >-
            The message to display. Use $SHELLM_PREVIOUS here to display output
            of previous tools.
    exec: 'echo "${message}"'
say:
  type: function
  function:
    name: say
    description: Display a static message to the user.
    parameters:
      type: object
      properties:
        message:
          type: string
          description: >-
            The message to display. Use $SHELLM_PREVIOUS here to display output
            of previous tools.
    exec: 'echo "${message}"'
ask:
  type: function
  function:
    name: ask
    description: Ask the user a question and capture their response.
    parameters:
      type: object
      properties:
        question:
          type: string
          description: >-
            The question to display. Use $SHELLM_PREVIOUS here to display output
            of previous tools.
      required:
        - message
    exec: 'read -p "${question} " 2>/dev/tty; echo "$REPLY"'
generate:
  type: function
  function:
    name: generate
    description: Display LLM-generated output to the user.
    parameters:
      type: object
      properties:
        prompt:
          type: string
          description: >-
            The prompt to be passed to the completion endpoint. Supports both
            Chat-like instructions and generic prediction/completion.
        json:
          type: boolean
          description: >-
            Set to true to format the output as JSON. Works only if JSON is also
            used in the prompt
      required:
        - prompt
    # language=sh
    exec: >-
      generate_response "$MODEL_SMALL" "${prompt}" 200 $( [[ "${json}" == "true" ]] && echo '-j' )
conditional:
  type: function
  function:
    name: conditional
    description: Apply .
    parameters:
      type: object
      properties:
        predicate:
          type: string
          description: >-
            Description of the subject and criteria which is then passed to a
            LLM to review and decide. Use $SHELLM_PREVIOUS here to display
            output of previous tools.
        tools:
          type: string
          description: >-
            The list of tool calls as JSON. Follow the same instructions that
            were given for the outer tools.
      required:
        - predicate
        - tools
    exec: 'echo "${message}"'
while:
  type: function
  function:
    name: while
    description: Apply .
    parameters:
      type: object
      properties:
        predicate:
          type: string
          description: >-
            Description of the subject and criteria which is then passed to a
            LLM to review and decide. Use $SHELLM_PREVIOUS here to display
            output of previous tools.
        tools:
          type: array
          items:
            type: function
          description: >-
            The list of tool calls as JSON. Follow the same instructions that
            were given for the outer tools.
          raw: true
      required:
        - predicate
        - tools
    # language=sh
    exec: >-
      tools=$(echo '${tools}' | jq -c '.[]');
      apply_tool_calls "$tools";
      generate_response -j "${predicate}";
#      while :; do
#          for tool_call in "${tools[@]}"; do
#              apply_tool_calls "$tool_call"
#          done
#          if ! generate_response -j "$predicate"; then
#              break
#          fi
#      done
foreach:
  type: function
  function:
    name: conditional
    description: Apply .
    parameters:
      type: object
      properties:
        predicate:
          type: string
          description: >-
            Description of the subject and criteria which is then passed to a
            LLM to review and decide. Use $SHELLM_PREVIOUS here to display
            output of previous tools.
        tools:
          type: string
          description: >-
            The list of tool calls as JSON. Follow the same instructions that
            were given for the outer tools.
      required:
        - predicate
        - tools
    exec: 'echo "${message}"'
